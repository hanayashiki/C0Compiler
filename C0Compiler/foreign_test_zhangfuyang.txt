const int X = 10;
const char __ = '+';	
const int __x = 0;
char xxxx[3];
int asad;
char mmm;
int l;
char _[4];
char p;
int pp;

char xx[2];
int a[100], mm;
char asd[111];

int Factorial(int n)
{
    if(n==1)
    {
        return (1);
    }
    return (Factorial(n-1)*n);
}

int Fibonacci(int a1, int a2, int n)
{
    int i, temp;
    if(n<=0)
        return (-1);
    else if(n==1)
        return (a1);
    if(n==2)
        return (a2);
    for(i=3;i<=n;i=i+1)
    {
        temp=a1+a2;
        a1=a2;
        a2=temp;
    }
    return (a2);
}



void newline()
{
    printf("");
}


int compare(int a, int b)
{
    if(a > b)
        return (1);
    if(a < b)
        return (-1);
    else
        return (0);
}

void main()
{
    const int A=1;
    const char a='a';
    int input1, input2, input3;
    int x[6],i,j,k;
    char out[26],t;
    printf("test global const");
    printf("X=",X);
    printf("__=",__); 
	input1 = compare(1,2) * Factorial(2) * 5 + A;
i = 'x' - a;
i = -i * 10;
i = 'x';
out[0] = 'x';
i = a;
  i = 1;
    j = i;
    j = j + i;
    i = -i * 10;
    i = +i + 'x' - a;
    k = +-10-10;
    k = --1+k;
    i = i + j + k;
    j = i - j;
    k = i * j;
    i = i / j;
    i = i + A;
    printf("start test");
    ;
    ;
    {}
    ;
    printf("test printf");
    printf(" !$%&'()*+,-./0123456789:;#<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
    printf("");
    printf("test simple assign");
    i = 1;
    j = i;
    j = j + i;
    i = -i * 10;
    i = +i + 'x' - a;
    k = +-10-10;
    k = --1+k;
    i = i + j + k;
    j = i - j;
    k = i * j;
    i = i / j;
    i = i + A;
    printf("i=",i);
    printf("j=",j);
pp = j;
    printf("k=",k);
    printf("");
    printf("test array");
    out[0] = 'a';
	out[1] = 'b';
	out[2] = 'c';
	out[3] = 'd';
	out[4] = 'e';
	out[5] = 'f';
	out[6] = 'g';
	out[7] = 'h';
	out[8] = 'i';
	out[9] = 'j';
	out[10] = 'k';
	out[11] = 'l';
	out[12] = 'm';
	out[13] = 'n';
	out[14] = 'o';
	out[15] = 'p';
	out[16] = 'q';
	out[17] = 'r';
	out[18] = 's';
	out[19] = 't';
	out[20] = 'u';
	out[21] = 'v';
	out[22] = 'w';
	out[23] = 'x';
	out[24] = 'y';
	out[25] = 'z';
_[0] = 'f';
_[1] = out[20];
_[2] = out[2];
_[3] = 'k';
    printf(out[7]);
    printf(out[4]);
    printf(out[11]);
    printf(out[11]);
    printf(out[14]);
    printf("");
    printf("test scanf");
    scanf(input1,input2);
	x[0] = input1;
	x[1] = input2;
    printf("x[0]=",x[0]);
    printf("x[1]=",x[1]);
    printf("");
    printf("test Fibonacci");
    i = Fibonacci(x[0], x[1], 5);
    printf("x[0]=",x[0]);
    printf("x[1]=",x[1]);
    printf("the fifth is ",i);
	;
	;
	;
	;
	
	;
	;
	;
	;
	;
	;
	;
	;
	;
    newline();
    printf("test some sentence");
    for(i=1;i>0;i=i+1)
    {
        scanf(input1,input2);
		x[2] = input1;
		x[3] = input2;
        i = compare(x[2],x[3]);
        if(i==1)
        {
            printf("x[2] bigger than x[3]");
        }
        if(i==-1)
            printf("x[2] smaller than x[3]");
        else if(i==0)
        {
            printf("equal");
            i = -10;
        }
    }
    printf("break from the 'for' loop");
    newline();
    printf("test switch");
    for(i=3;i>+-1;i=i-1)
    {
        scanf(t);
		; ; ; ; ; ; ; ; ; ; ; ; ; ; ;  ;
        switch(t)
        {
            case 'a':
            {
                x[4] = 0+-1+t;
                printf("case a");
                printf("x[4]=",x[4]);
            }
            case 'b':
            {
                x[4] = 2*(t+-1);
                printf("case b");
                printf("x[4]=",x[4]);
            }
	    default:
            {
                x[4] = 0;
                printf("default");
                printf("x[4]=",x[4]);
            }
            
        }
    }
    printf("");  
    printf("test recursive function");
    scanf(input1);
	x[5] = input1;
    printf("x[5]! =", Factorial(x[5]));
    newline();  
    printf("test global const");
    printf("X=",X);
    printf("__=",__);    
    printf("test end, good luck");
	printf(_[0]);
	printf(_[1]);
	printf(_[2]);
	printf(_[3]);
printf(pp);

}